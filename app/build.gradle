plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}

android {
    namespace 'ru.litov74dev.testapplication'
    compileSdk 33

    defaultConfig {
        applicationId "ru.litov74dev.testapplication"
        minSdk 22
        targetSdk 33
        versionCode 1
        versionName "1.0"
        setProperty("archivesBaseName", "TestApp-v$versionName-$versionCode-" + getDate())

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        named("debug") {
            storeFile = rootProject.file("debug.keystore")
            storePassword = "android"
            keyAlias = "androiddebugkey"
            keyPassword = "android"
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.getByName("debug")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors{
        dev {
            buildConfigField "String", "API_URL", "\"http://api.themoviedb.org/3/\""
            buildConfigField "String", "ACCESS_TOKEN", "\"02b113b496621e5a49428c55c55a3ccc\""
            applicationIdSuffix ".dev"
            dimension "default"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = getFileName(output.outputFile.name, variant.versionName)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

def getDate(){
    return new Date().format('MMddHHmm')
}

def getFileName(oldFileNmae, version) {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    def commit = proc.text.trim()
    def appName = oldFileNmae.replace(".apk","")
    return appName + "-" + commit + ".apk";
}


dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Hilt
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-android-compiler:2.44"

    // Fragment/VM
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.fragment:fragment-ktx:1.5.5"

    //retorfit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'

    //логирование
    implementation 'com.jakewharton.timber:timber:5.0.1'

    //ошибки зависания
    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'
}